# Specify our compose version
version: '3'

# Container services
services:
  # Specify notebook service
  notebook:
    # Select image to be used for container
    image: ${NOTEBOOK_CONTAINER_VERSION}
    # Mount internal folder to /notebooks folder in container, 1:1 copy
    volumes:
     - ./src/:/notebooks

     # Map an internal drive/folder to the insides of the containmer
     - ${HOST_DATA_OUTPUT_LOCATION}:/notebooks/output
    
    # Place specific OS variables here
    environment:
      - JUPYTER_ENABLE_LAB=yes
      # you can go to localhost:PORT?token=value
      - JUPYTER_TOKEN=${NOTEBOOK_TOKEN_VALUE}
    env_file:
      - .env
    # Run this command on container startup: Start notebook service
    command: start-notebook.sh --NotebookApp.notebook_dir=/notebooks

    # Specify container name
    container_name: ${NOTEBOOK_CONTAINER_NAME}

    # Mount external port to an interal port EXTERNAL:INTERNAL
    ports:
      - "${NOTEBOOK_CONTAINER_PORT}:8888"
  
  # MAIN PYTHON APPLICATION
  app:
    container_name: ${APP_CONTAINER_NAME}
    # Specify Docker file
    build:
      context: ./docker
      dockerfile: app.Dockerfile
    # Expose port
    ports:
      - "5000:5000"
    # Mount internal src/app directory to the inside of the container
    volumes:
     - ./src/app:/code
    # Set environment to development so we can hot-reload
    environment:
      FLASK_ENV: development
  redis:
    container_name: ${REDIS_CONTAINER_NAME}
    image: "redis:alpine"

